service: step-functions
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  environment:
    tableName: ${self:custom.tableName}
    signupTableName: ${self:custom.signupTableName}
    bucketName: ${self:custom.bucketName}
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:*
        - ses:*
      Resource: '*'
  apiGateway:
    apiKeys:
      - free:
        - MyFreeApiKey
      - paid:
        - MyPaidApiKey
        - user2PaidApiKey
    usagePlan:
      - free:
          quota:
            limit: 1000
            period: MONTH
          throttle:
            rateLimit: 5
            burstLimit: 20
      - paid:
          quota:
            limit: 1000
            period: MONTH
          throttle:
            burstLimit: 20
            rateLimit: 5

plugins:
  - serverless-offline
  - serverless-webpack
  - serverless-step-functions

package: 
  individually: true

custom:
  tableName: player-points
  signupTableName: signup-table-name
  bucketName: server1essprojectupload-22321321321

stepFunctions:
    validate: true
    stateMachines:
        reminderEmail:
            name: reminderEmail
            events:
                - http:
                      path: signup-with-reminders
                      method: POST
                      cors: true
            definition: ${file(./stepFunction.yml)}

functions:
   addSignup:
        handler: lambdas/stepFunctionLambdas/addSignup.handler
    getSignup:
        handler: lambdas/stepFunctionLambdas/getSignup.handler
    sendReminderEmail:
        handler: lambdas/stepFunctionLambdas/sendReminderEmail.handler

resources:
  Resources:
     MyEmailSignUp:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.signupTableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
          - AttributeName: game
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST