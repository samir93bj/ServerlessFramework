service: myserverlessproject
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  environment:
    tableName: ${self:custom.tableName}
    bucketName: ${self:custom.bucketName}
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:*
        - s3:*
        - ses:*
      Resource: '*'
  apiGateway:
    apiKeys:
      - free:
        - MyFreeApiKey
      - paid:
        - MyPaidApiKey
        - user2PaidApiKey
    usagePlan:
      - free:
          quota:
            limit: 1000
            period: MONTH
          throttle:
            rateLimit: 5
            burstLimit: 20
      - paid:
          quota:
            limit: 1000
            period: MONTH
          throttle:
            burstLimit: 20
            rateLimit: 5

plugins:
  - serverless-s3-sync
  - serverless-offline
  - serverless-webpack

package: 
  individually: true

custom:
  tableName: player-points
  bucketName: server1essprojectupload-22321321321
  s3Sync:
    - bucketName: server1essprojectupload-22321321321
      localDir: UploadData
  
functions:
  helloWorld:
    handler: handler.hello
    events:
      - http:
          path: helloWorld
          method: GET

  getUser:
    handler: lambdas/endpoints/getUser.handler
    events:
      - http:
            path: get-user/{ID}
            method: GET
            cors: true
            private: true

  getPlayerScore:
    handler: lambdas/endpoints/getPlayerScore.handler
    events:
      - http:
            path: get-player-score/{ID}
            method: GET
            cors: true
            private: true

  createPlayerScore:
    handler: lambdas/endpoints/createPlayerScore.handler
    events:
      - http:
            path: create-player-score/{ID}
            method: POST
            cors: true
            private: true

  updatePlayerScore:
    handler: lambdas/endpoints/updatePlayerScore.handler
    events:
      - http:
          path: update-player-score/{ID}
          method: PUT
          cors: true
          private: true

  createFile:
      handler: lambdas/endpoints/createFile.handler
      events:
        - http:
              path: create-file/{fileName}
              method: POST
              cors: true
              private: true
  
  getFile:
      handler: lambdas/endpoints/getFile.handler
      events:
        - http:
              path: get-file/{fileName}
              method: GET
              cors: true
              private: true

  sendEmail:
        handler: lambdas/endpoints/sendEmail.handler
        events:
          - http:
                path: send-email
                method: POST
                cors: true
                private: true              

  proxy:
    handler: lambdas/endpoints/proxy.handler
    events:
      - http:
          path: chuck-norris/{proxy+}
          method: ANY
          integration: lambda-proxy
          request:
            uri: http://api.icndb.com/{proxy}
            parameters:
              paths:
                proxy: true

resources:
  Resources:
    DemoBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: server1essprojectupload-22321321321
    
    MyDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    myAssumeRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: myAssumeRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - apigateway.amazonaws.com
              Action: sts:AssumeRole
        
